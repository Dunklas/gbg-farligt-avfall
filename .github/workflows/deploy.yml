name: Deploy

on:
  push:
    branches: [ master ]

jobs:

  deploy-backend:
    name: Deploy backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Obtain PR number
        run: |
          PR_NUMBER=$(curl -s -H "Accept: application/vnd.github.groot-preview+json" https://api.github.com/repos/Dunklas/gbg-farligt-avfall/commits/$GITHUB_SHA/pulls | jq -r '.[0].number')
          echo "::set-output name=number::$PR_NUMBER"
        id: pull_request
     
      - name: Deploy web certificate
        uses: youyo/aws-cdk-github-actions@v1
        with:
          working_dir: 'gfa-iac'
          cdk_subcommand: >
            deploy -c artifactsBucketName=${{ secrets.S3_ARTIFACT_BUCKET }}
                   -c version=${{ steps.pull_request.outputs.number }}
                   -c hostedZoneId=${{ secrets.HOSTED_ZONE_ID }}
                   -c domainName=${{ secrets.DOMAIN_NAME }}
          cdk_stack: GbgFarligtAvfallWebCertStack
          cdk_args: '--require-approval never'
          actions_comment: false

      - name: Deploy main stack
        uses: youyo/aws-cdk-github-actions@v1
        with:
          working_dir: 'gfa-iac'
          cdk_subcommand: >
            deploy -c artifactsBucketName=${{ secrets.S3_ARTIFACT_BUCKET }}
                   -c version=${{ steps.pull_request.outputs.number }}
                   -c hostedZoneId=${{ secrets.HOSTED_ZONE_ID }}
                   -c domainName=${{ secrets.DOMAIN_NAME }}
                   -c sendgridApiKey=${{ secrets.SENDGRID_API_KEY }}
                   -c adminEmail=${{ secrets.ADMIN_EMAIL }}
          cdk_stack: GbgFarligtAvfallStack
          cdk_args: '--require-approval never'
          actions_comment: false

  deploy-frontend:
    name: Deploy frontend
    needs: deploy-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: gfa-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install dependencies
        run: npm ci

      - name: Obtain API url
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name GbgFarligtAvfallStack --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
          echo "::set-output name=url::$API_URL"
        id: api_endpoint

      - name: Obtain web hosting bucket
        run: |
          WEB_BUCKET=$(aws cloudformation describe-stacks --stack-name GbgFarligtAvfallStack --query "Stacks[0].Outputs[?OutputKey=='WebBucket'].OutputValue" --output text)
          DIST_ID=$(aws cloudformation describe-stacks --stack-name GbgFarligtAvfallStack --query "Stacks[0].Outputs[?OutputKey=='WebDistributionId'].OutputValue" --output text)
          echo "::set-output name=bucket::$WEB_BUCKET"
          echo "::set-output name=dist_id::$DIST_ID"
        id: web_hosting

      - name: Build frontend
        run: API_URL=${{ steps.api_endpoint.outputs.url }} npm run build

      - name: Deploy frontend
        run: aws s3 sync build s3://${{ steps.web_hosting.outputs.bucket }}

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.web_hosting.outputs.dist_id }} --paths "/*" 

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Release cache
        uses: actions/cache@v2
        with:
          path: gfa-backend/target
          key: ${{ runner.os }}-build-release-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-release-cache-
      - name: Unit tests
        run: (cd gfa-backend && cargo test --release)


